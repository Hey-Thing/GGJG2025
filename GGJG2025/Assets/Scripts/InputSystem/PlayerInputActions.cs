//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""PlayerInp"",
            ""id"": ""f31f22cb-0fdf-4050-9c45-5581ae66078b"",
            ""actions"": [
                {
                    ""name"": ""VertMovement"",
                    ""type"": ""Value"",
                    ""id"": ""3fad75c9-99e2-444b-ae38-dc7225e145bd"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Value"",
                    ""id"": ""59b28388-e069-4d1c-b85c-1e83d7bc49e0"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2ae80018-4cf8-4ff9-b825-93dd6be07314"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Joystick"",
                    ""id"": ""c79d1909-21cc-4dcc-987b-4049e25d9334"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b217f6f6-96a3-4d5d-bec8-d9564da9b72a"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""173793c4-9fd3-499a-8cd6-40c5ed714cfe"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1aa2c3a2-263a-4829-b3ac-833eb978452d"",
                    ""path"": ""<Joystick>/stick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""1e7f7117-c61a-4c1b-b27a-f567f3309a4e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""74e34c35-13fc-4db6-a296-04639022b265"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""7fa860da-473c-4050-b427-e3183f793142"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VertMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PlayerInput"",
            ""bindingGroup"": ""PlayerInput"",
            ""devices"": []
        }
    ]
}");
        // PlayerInp
        m_PlayerInp = asset.FindActionMap("PlayerInp", throwIfNotFound: true);
        m_PlayerInp_VertMovement = m_PlayerInp.FindAction("VertMovement", throwIfNotFound: true);
        m_PlayerInp_Aiming = m_PlayerInp.FindAction("Aiming", throwIfNotFound: true);
    }

    ~@PlayerInputActions()
    {
        UnityEngine.Debug.Assert(!m_PlayerInp.enabled, "This will cause a leak and performance issues, PlayerInputActions.PlayerInp.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInp
    private readonly InputActionMap m_PlayerInp;
    private List<IPlayerInpActions> m_PlayerInpActionsCallbackInterfaces = new List<IPlayerInpActions>();
    private readonly InputAction m_PlayerInp_VertMovement;
    private readonly InputAction m_PlayerInp_Aiming;
    public struct PlayerInpActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerInpActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @VertMovement => m_Wrapper.m_PlayerInp_VertMovement;
        public InputAction @Aiming => m_Wrapper.m_PlayerInp_Aiming;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInp; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInpActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInpActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInpActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInpActionsCallbackInterfaces.Add(instance);
            @VertMovement.started += instance.OnVertMovement;
            @VertMovement.performed += instance.OnVertMovement;
            @VertMovement.canceled += instance.OnVertMovement;
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
        }

        private void UnregisterCallbacks(IPlayerInpActions instance)
        {
            @VertMovement.started -= instance.OnVertMovement;
            @VertMovement.performed -= instance.OnVertMovement;
            @VertMovement.canceled -= instance.OnVertMovement;
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
        }

        public void RemoveCallbacks(IPlayerInpActions instance)
        {
            if (m_Wrapper.m_PlayerInpActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInpActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInpActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInpActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInpActions @PlayerInp => new PlayerInpActions(this);
    private int m_PlayerInputSchemeIndex = -1;
    public InputControlScheme PlayerInputScheme
    {
        get
        {
            if (m_PlayerInputSchemeIndex == -1) m_PlayerInputSchemeIndex = asset.FindControlSchemeIndex("PlayerInput");
            return asset.controlSchemes[m_PlayerInputSchemeIndex];
        }
    }
    public interface IPlayerInpActions
    {
        void OnVertMovement(InputAction.CallbackContext context);
        void OnAiming(InputAction.CallbackContext context);
    }
}
